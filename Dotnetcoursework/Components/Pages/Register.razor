@page "/"
@inject NavigationManager NavigationManager
@using SQLite
@using Services
@using System.ComponentModel.DataAnnotations
@using Dotnetcoursework.Model

<div class="container mt-5">
    <h2>Register User</h2>

    <EditForm Model="@customer" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="customerName" class="form-label">User Name</label>
            <InputText id="customerName" class="form-control" @bind-Value="customer.Username" />
            <ValidationMessage For="@(() => customer.Username)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="customer.Email" />
            <ValidationMessage For="@(() => customer.Email)" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="customer.Password" />
            <ValidationMessage For="@(() => customer.Password)" />
        </div>

        <div class="mb-3">
            <label for="currencyType" class="form-label">Currency Type</label>
            <select id="currencyType" class="form-control" @bind="customer.CurrencyType">
                <option value="NPR">Nepali Rupees</option>
                <option value="INR">Indian Rupees</option>
                <option value="USD">US Dollar</option>
            </select>
            <ValidationMessage For="@(() => customer.CurrencyType)" />
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="mt-3 alert @(statusMessage.Contains("error") ? "alert-danger" : "alert-success")">
            @statusMessage
        </div>
    }
</div>

@code {
    private Customer customer = new Customer();
    private Database DatabaseService = new Database();
    private string statusMessage = string.Empty;

    private async Task OnValidSubmit()
    {
        try
        {
            // Check if the username or email already exists
            var existingUserByUsername = await DatabaseService.GetUserByUsername(customer.Username);
            var existingUserByEmail = await DatabaseService.GetUserByEmail(customer.Email);

            if (existingUserByUsername != null)
            {
                statusMessage = "Registration failed: Username is already in use.";
                return;
            }

            if (existingUserByEmail != null)
            {
                statusMessage = "Registration failed: Email is already in use.";
                return;
            }

            // Attempt to add the user
            var success = await DatabaseService.AddUser(customer);
            if (success)
            {
                statusMessage = "Customer registered successfully!";
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                statusMessage = "Registration failed: An error occurred while registering the user.";
            }
        }
        catch (SQLiteException sqlex)
        {
            statusMessage = $"Database error: {sqlex.Message}";
        }
        catch (Exception ex)
        {
            statusMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}