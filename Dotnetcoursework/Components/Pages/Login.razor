@page "/login"
@inject NavigationManager NavigationManager
@using Services
@using System.ComponentModel.DataAnnotations
@using Dotnetcoursework.Model

<div class="container mt-5">
    <h2>Login User</h2>

    <EditForm Model="@customer" OnSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="customer.Email" />
            <ValidationMessage For="@(() => customer.Email)" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="customer.Password" />
            <ValidationMessage For="@(() => customer.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="mt-3 alert @(statusMessage.Contains("error") ? "alert-danger" : "alert-success")">
            @statusMessage
        </div>
    }
</div>

@code {
    private Customer customer = new Customer();
    private Database DatabaseService = new Database();
    private string statusMessage = string.Empty;

    private async Task OnValidSubmit()
    {
        try
        {
            // Check if the user exists by email
            var user = await DatabaseService.GetUserByEmail(customer.Email);

            if (user != null)
            {
                // Verify the password
                if (user.Password == customer.Password)
                {
                    statusMessage = "Login successful!";
                    NavigationManager.NavigateTo("/weather"); // Redirect to the weather page
                }
                else
                {
                    statusMessage = "Login failed: Incorrect password.";
                }
            }
            else
            {
                statusMessage = "Login failed: User with this email does not exist.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}